tidymodels_prefer()
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip() |> pluck("fit")
# Extract the random forest model from the workflow
rf_model <- rf_fit %>% extract_fit_parsnip() |> pluck("fit")
# Update the explain_tidymodels calls
explainer_lm <- explain_tidymodels(
lm_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <- explain_tidymodels(
rf_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip()
# Extract the random forest model from the workflow
rf_model <- rf_fit %>% extract_fit_parsnip()
# Update the explain_tidymodels calls
explainer_lm <- explain_tidymodels(
lm_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <- explain_tidymodels(
rf_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip() |> pluck("fit")
# Extract the random forest model from the workflow
rf_model <- rf_fit %>% extract_fit_parsnip() |> pluck("fit")
# Update the explain_tidymodels calls
explainer_lm <- explain_tidymodels(
lm_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <- explain_tidymodels(
rf_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
source("~/Desktop/tmwr/scripts/00-ames-housing-model-building.R")
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: linear regression model
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_lm
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: model-agnostic explainer: linear regression model
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_lm
#| label: breakdown explanation implemented with predict_parts() for the linear model
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
-0.070 > -0.032
-0.074 > -0.070
rf_breakdown |> arrange(desc(contribution))
?predict_parts
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#>                                           contribution
#> lm + interactions: intercept                     5.221
#> lm + interactions: Gr_Liv_Area = 1040           -0.082
#> lm + interactions: Bldg_Type = 3                -0.049
#> lm + interactions: Longitude = -93.608903       -0.043
#> lm + interactions: Year_Built = 1949            -0.039
#> lm + interactions: Latitude = 42.035841         -0.007
#> lm + interactions: Neighborhood = 1              0.001
#> lm + interactions: prediction                    5.002
#| label: load necessary packages
library(DALEXtra)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: load necessary packages
library(dplyr)
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts() for the linear model
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
source("~/Desktop/tmwr/scripts/00-ames-housing-model-building.R")
#| label: load necessary packages
library(DALEXtra)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: load necessary packages
library(dplyr)
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts() for the linear model
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
#| label: load necessary packages
library(DALEXtra)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: load necessary packages
library(dplyr)
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts() for the linear model
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
#| label: load necessary packages
library(DALEXtra)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: load necessary packages
library(dplyr)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: load necessary packages
library(dplyr)
#| label: load necessary packages
library(dplyr)
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts() for the linear model
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
#| label: Shaply Additive Explainations
set.seed(1801)
shap_duplex <-
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
type = "shap",
B = 20
)
#| label: Shaply Additive Explainations
set.seed(1801)
shap_duplex <-
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
type = "shap",
B = 20
)
shap_duplex
#| label: load necessary packages
library(forcats)
#| label: visualizing the distribution of contributions accross all the orderings (box plots) and the average attribution for each feature (bar plots)
shap_duplex |>
group_by(variable) |>
mutate(mean_val = mean(contribution)) |>
ungroup() |>
mutate(variable = fct_reorder(variable, abs(mean_val))) |>
ggplot(aes(contribution, variable, fill = mean_val > 0)) +
geom_col(data = -distinct(., variable, mean_val),
aes(mean_val, variable),
alpha = 0.5) +
geom_boxplot(width = 0.5) +
theme(legend.position = "none") +
scale_fill_viridis_d() +
labs(y = NULL)
#| label: visualizing the distribution of contributions accross all the orderings (box plots) and the average attribution for each feature (bar plots)
shap_duplex |>
group_by(variable) |>
mutate(mean_val = mean(contribution)) |>
ungroup() |>
mutate(variable = fct_reorder(variable, abs(mean_val))) |>
ggplot(aes(contribution, variable, fill = mean_val > 0)) +
geom_col(data = ~distinct(., variable, mean_val),
aes(mean_val, variable),
alpha = 0.5) +
geom_boxplot(width = 0.5) +
theme(legend.position = "none") +
scale_fill_viridis_d() +
labs(y = NULL)
#| label: load necessary packages
theme_set(theme_bw())
library(DALEXtra)
#| label: visualizing the distribution of contributions accross all the orderings (box plots) and the average attribution for each feature (bar plots)
shap_duplex |>
group_by(variable) |>
mutate(mean_val = mean(contribution)) |>
ungroup() |>
mutate(variable = fct_reorder(variable, abs(mean_val))) |>
ggplot(aes(contribution, variable, fill = mean_val > 0)) +
geom_col(data = ~distinct(., variable, mean_val),
aes(mean_val, variable),
alpha = 0.5) +
geom_boxplot(width = 0.5) +
theme(legend.position = "none") +
scale_fill_viridis_d() +
labs(y = NULL)
View(shap_duplex)
#| label: one-family home type in the Gilber neighborhood
big_house <- vip_train[1269, ]
big_house
#| label: Shaply Additive Explainations for the duplex type in the Gilbert neighborhood
set.seed(1802)
shap_house <-
predict_parts(
explainer = explainer_rf,
new_observation = big_house,
type = "shap",
B = 20
)
shap_house
shap_house |>
group_by(variable) |>
mutate(mean_val = mean(contribution)) |>
ungroup() |>
mutate(variable = fct_reorder(variable, abs(mean_val))) |>
ggplot(aes(contribution, variable, fill = mean_val > 0)) +
geom_col(data = ~distinct(., variable, mean_val),
aes(mean_val, variable),
alpha = 0.5) +
geom_boxplot(width = 0.5) +
theme(legend.position = "none") +
scale_fill_viridis_d() +
labs(y = NULL)
#| label: global explainations via model_parts function for the linear regression model
set.seed(1803)
vip_lm <- model_parts(explainer_lm, loss_function = loss_root_mean_square)
vip_lm
#| label: global explainations via model_parts function for the random forest model
set.seed(1804)
vip_rf <- model_parts(explainer_rf, loss_function = loss_root_mean_square)
vip_rf
#| label: defining a function for visualizing global explanations
ggplot_imp <- function(...) {
obj <- list(...)
metric_name <- attr(obj[[1]], "loss_name")
metric_lab <- paste(metric_name,
"after permutations\n()higher indicates more important")
full_vip <- bind_rows(obj) |>
filter(variable != "_baseline_")
perm_vals <- full_vip |>
filter(variable == "_full_model_") |>
group_by(label) |>
summarise(dropout_loss = mean(dropout_loss))
p <- full_vip |>
filter(variable != "_full_model_") |>
mutate(variable = fct_reorder(variable, dropout_loss)) |>
ggplot(aes(dropout_loss, variable))
if(length(obj) > 1) {
p <- p +
facet_wrap(vars(label)) +
geom_vline(data = perm_vals, aes(xintercept = dropout_loss, color = label),
linewidth = 1.4, lty = 2, alpha = 0.7) +
geom_boxplot(aes(color = label, fill = label), alpha = 0.2)
}
else {
p <- p +
geom_vline(data = perm_vals, aes(xintercept = dropout_loss),
linewidth = 1.4, lty = 2, alpha = 0.7) +
geom_boxplot(fill = "#91CBD765", alpha = 0.4)
}
p +
theme(legend.position = "none") +
labs(x = metric_lab,
y = NULL, fill = NULL, color = NULL
)
}
#| label: defining a function for visualizing global explanations
ggplot_imp <- function(...) {
obj <- list(...)
metric_name <- attr(obj[[1]], "loss_name")
metric_lab <- paste(metric_name,
"after permutations\n(higher indicates more important)")
full_vip <- bind_rows(obj) |>
filter(variable != "_baseline_")
perm_vals <- full_vip |>
filter(variable == "_full_model_") |>
group_by(label) |>
summarise(dropout_loss = mean(dropout_loss))
p <- full_vip |>
filter(variable != "_full_model_") |>
mutate(variable = fct_reorder(variable, dropout_loss)) |>
ggplot(aes(dropout_loss, variable))
if(length(obj) > 1) {
p <- p +
facet_wrap(vars(label)) +
geom_vline(data = perm_vals, aes(xintercept = dropout_loss, color = label),
linewidth = 1.4, lty = 2, alpha = 0.7) +
geom_boxplot(aes(color = label, fill = label), alpha = 0.2)
} else {
p <- p +
geom_vline(data = perm_vals, aes(xintercept = dropout_loss),
linewidth = 1.4, lty = 2, alpha = 0.7) +
geom_boxplot(fill = "#91CBD765", alpha = 0.4)
}
p +
theme(legend.position = "none") +
labs(x = metric_lab,
y = NULL, fill = NULL, color = NULL)
}
#| label: visualizing the global explanations using the defined function
ggplot_imp(vip_lm, vip_rf)
