#| label: load necessary packages
library(ggplot2)
library(dplyr)
theme_set(theme_bw())
#| label: mean sales price of the neighborhoods
ames_train |>
group_by(Neighborhood) |>
summarize(mean = mean(Sale_Price),
std_err = sd(Sale_Price) / sqrt(length(Sale_Price))) |>
ggplot(aes(y = reorder(Neighborhood, mean), x = mean)) +
geom_point() +
geom_errorbar(aes(xmin = mean - 1.64 * std_err, xmax = mean + 1.64 * std_err)) +
labs(y = NULL, x = "Price (mean, log scale)")
#| label: load necessary packages
library(tidymodels)
tidymodels_prefer()
library(embed)
#| label: estimating the effect of each level in a categorical predictor on the outcome
ames_glm <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type +
Latitude + Longitude, data = ames_train) |>
step_log(Gr_Liv_Area, base = 10) |>
# glm - Generalized Linear Model
step_lencode_glm(Neighborhood, outcome = vars(Sale_Price)) |>
step_dummy(all_nominal_predictors()) |>
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_")) |>
step_ns(Latitude, Longitude, deg_free = 20)
ames_glm
#| label: fitting the recipe
glm_estimates <-
prep(ames_glm) |>
tidy(number = 2)
glm_estimates
#| label: handling situations where a novel factor level is encountered
glm_estimates |>
filter(level == "..new")
#| label: example of partial pooling: modeling the effects for each level all at once using a mixed linear model
ames_mixed <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type +
Latitude + Longitude, data = ames_train) |>
step_log(Gr_Liv_Area, base = 10) |>
step_lencode_mixed(Neighborhood, outcome = vars(Sale_Price)) |>
step_dummy(all_nominal_predictors()) |>
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_")) |>
step_ns(Latitude, Longitude, deg_free = 20)
ames_mixed
#| label: fitting and displaying the results
mixed_estimates <-
prep(ames_mixed) |>
tidy(number = 2)
mixed_estimates
#| label: encoding new levels at close to the same value as with the GLM
mixed_estimates |>
filter(level == "..new")
#| label: partial pooling vs. no pooling
glm_estimates |>
rename(`no pooling` = value) |>
left_join(
mixed_estimates |>
rename(`partial pooling` = value), by = "level"
) |>
left_join(
ames_train |>
count(Neighborhood) |>
mutate(level = as.character(Neighborhood))
) |>
ggplot(aes(`no pooling`, `partial pooling`, size = sqrt(n))) +
geom_abline(color = "gray50", lty = 2) +
geom_point(alpha = 0.7) +
coord_fixed()
#| label: load necessary packages
library(DALEXtra)
install_dependencies()
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
#| label: load necessary packages
library(dplyr)
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: linear regression model
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_lm
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: load necessary packages
library(DALEXtra)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: load necessary packages
library(dplyr)
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
explainer_lm
library(DALEXtra)
vip_features <- c("Neighborhood", "Gr_Liv_Area", "Year_Built",
"Bldg_Type", "Latitude", "Longitude")
vip_train <-
ames_train %>%
select(all_of(vip_features))
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
library(DALEXtra)
vip_features <- c("Neighborhood", "Gr_Liv_Area", "Year_Built",
"Bldg_Type", "Latitude", "Longitude")
vip_train <-
ames_train %>%
select(all_of(vip_features))
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
duplex <- vip_train[120,]
duplex
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip() |> pluck("fit")
?pluck
#| label: laod necessary packages
library(purrr)
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip() |> pluck("fit")
#| label: load necessary packages
library(purrr)
library(tidymodels)
tidymodels_prefer()
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip() |> pluck("fit")
# Extract the random forest model from the workflow
rf_model <- rf_fit %>% extract_fit_parsnip() |> pluck("fit")
# Update the explain_tidymodels calls
explainer_lm <- explain_tidymodels(
lm_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <- explain_tidymodels(
rf_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip()
# Extract the random forest model from the workflow
rf_model <- rf_fit %>% extract_fit_parsnip()
# Update the explain_tidymodels calls
explainer_lm <- explain_tidymodels(
lm_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <- explain_tidymodels(
rf_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: breakdown explanation implemented with predict_parts()
# lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
# lm_breakdown
#
# Error in UseMethod("predict") :
#   no applicable method for 'predict' applied to an object of class "workflow"
# Extract the linear model from the workflow
lm_model <- lm_fit %>% extract_fit_parsnip() |> pluck("fit")
# Extract the random forest model from the workflow
rf_model <- rf_fit %>% extract_fit_parsnip() |> pluck("fit")
# Update the explain_tidymodels calls
explainer_lm <- explain_tidymodels(
lm_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_rf <- explain_tidymodels(
rf_model,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
source("~/Desktop/tmwr/scripts/00-ames-housing-model-building.R")
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: extraxting vip features from training data
vip_train <-
ames_train |>
select(all_of(vip_features))
vip_train
#| label: model-agnostic explainer: linear regression model
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_lm
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: breakdown explanation implemented with predict_parts()
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
#| label: model-agnostic explainer: random forest model
explainer_rf <-
explain_tidymodels(
rf_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "random forest",
verbose = FALSE
)
explainer_rf
#| label: model-agnostic explainer: linear regression model
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = ames_train$Sale_Price,
label = "lm + interactions",
verbose = FALSE
)
explainer_lm
#| label: breakdown explanation implemented with predict_parts() for the linear model
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#| label: breakdown explanation implemented with predict_parts() for the random forest model
rf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)
rf_breakdown
-0.070 > -0.032
-0.074 > -0.070
rf_breakdown |> arrange(desc(contribution))
?predict_parts
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
#| label: duplex building type in the North Ames neighborhood
duplex <- vip_train[120, ]
duplex
#| label: define the features for model-agnostic explainer
vip_features <-
c("Neighborhood", "Gr_Liv_Area", "Year_Built", "Bldg_Type",
"Latitude", "Longitude")
vip_features
#| label: changing the relative importance of the features
predict_parts(
explainer = explainer_rf,
new_observation = duplex,
order = lm_breakdown$variable_name
)
lm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)
lm_breakdown
#>                                           contribution
#> lm + interactions: intercept                     5.221
#> lm + interactions: Gr_Liv_Area = 1040           -0.082
#> lm + interactions: Bldg_Type = 3                -0.049
#> lm + interactions: Longitude = -93.608903       -0.043
#> lm + interactions: Year_Built = 1949            -0.039
#> lm + interactions: Latitude = 42.035841         -0.007
#> lm + interactions: Neighborhood = 1              0.001
#> lm + interactions: prediction                    5.002
