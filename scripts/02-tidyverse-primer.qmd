---
title: "A Tidyverse Primer"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2024/09/14
---

# A Tidyverse Primer

## 2.1 TIDYVERSE PRINCIPLES

### 2.1.1 DESIGN FOR HUMANS

-   The tidyverse focuses on designing R packages and functions that can be easily understood and used by a broad range of people. Both historically and today, a substantial percentage of R users are not people who create software or tools but instead people who create analyses or models.

```{r}
#| warning: false
#| label: load necessary packages
library(dplyr)
library(magrittr)
library(ggplot2)
library(purrr)
library(lubridate)
library(readr)
```

```{r}
#| label: sorting in base R
mtcars[order(mtcars$gear, mtcars$mpg), ]
```

```{r}
#| label: sorting in tidyverse
arrange(.data = mtcars, gear, mpg)
```

### 2.1.2 REUSE EXISTING DATA STRUCTURES

-   Whenever possible, functions should avoid returning a novel data structure. If the results are conducive to an existing data structure, it should be used. This reduces the cognitive load when using software; no additional syntax or methods are required.

-   The data frame is the preferred data structure in tidyverse and tidymodels packages, because its structure is a good fit for such a broad swath of data science tasks. Specifically, the tidyverse and tidymodels favor the tibble, a modern reimagining of R’s data frame that we describe in the next section on example tidyverse syntax.

```{r}
#| label: data frames and tibbles
boot_samp <- rsample::bootstraps(mtcars, times = 3)
boot_samp
class(boot_samp)
```

-   A specialized data structure is not flexible enough for an entire modeling workflow in the way that a common data structure is.

### 2.1.3 DESIGN FOR THE PIPE AND FUNCTIONAL PROGRAMMING

```{r}
#| label: saving small portion of data frame in base R
small_mtcars <- arrange(mtcars, gear)
small_mtcars <- slice(small_mtcars, 1:10)
small_mtcars
```

```{r}
#| label: or more compactly
small_mtcars <- slice(arrange(mtcars, gear), 1:10)
small_mtcars
```

```{r}
#| label: using pipe operator
small_mtcars <- 
  mtcars %>%
  arrange(gear) %>% 
  slice(1:10)
```

```{r}
#| label: similarity to ggplot2
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_smooth(method = lm)
```

```{r}
#| label: logarithm of the ratio of the fuel efficiency to the car weight with for loop

n <- nrow(mtcars)
ratios <- rep(NA_real_, n)

for (car in 1:n) {
  ratios[car] <- log(mtcars$mpg[car]/mtcars$wt[car])
}

head(ratios)
```

```{r}
#| label: logarithm of the ratio of the fuel efficiency to the car weight with vectorized R code

ratios <- log(mtcars$mpg/mtcars$wt)
ratios
```

```{r}
#| label: writing function to compute logarithm of the ratio of the fuel efficiency to the car weight

compute_log_ratio <- function(mpg, wt) {
  log_base <- getOption("log_base", default = exp(1)) # gets external data
  results <- log(mpg/wt, base = log_base)           
  print(mean(results))                                # prints to the console
  done <<- TRUE                                       # sets external data
  
  results
}
```

```{r}
#| label: applying the user defined function
compute_log_ratio(mtcars$mpg, mtcars$wt)
```

```{r}
#| label: better version
compute_log_ratio <- function(mpg, wt, log_base = exp(1)) {
  log(mpg/wt, base = log_base)
}
```

The **`purrr`** package contains tools for functional programming. Let’s focus on the `map()` family of functions, which operates on vectors and always returns the same type of output. The most basic function, `map()`, always returns a list and uses the basic syntax of `map(vector, function)`.

```{r}
#| label: example of map function family of purr
map(head(mtcars$mpg, 3), sqrt)
```

```{r}
#| label: generating one of the basic vector types
map_dbl(head(mtcars$mpg, 3), sqrt)
```

```{r}
#| label: a function that operates across multiple vectors
log_ratios <- map2_dbl(mtcars$mpg, mtcars$wt, compute_log_ratio)
head(log_ratios)
```

```{r}
#| label: anonymous functions
map2_dbl(mtcars$mpg, mtcars$wt, ~ log(.x/.y)) |> 
  head()
```

## 2.2 EXAMPLES OF TIDYVERSE SYNTAX

```{r}
#| label: data frames demand valid variable names
# Wants valid names:
data.frame(`variable 1` = 1:2, two = 3:4)

# But can be coerced to use them with an extra option:
df <- data.frame(`variable 1` = 1:2, two = 3:4, check.names = FALSE)
df
```

```{r}
#| label: tibbles do not demand valid variable names, they just work
tbbl <- tibble(`variable 1` = 1:2, two = 3:4)
```

```{r}
#| label: data frames enable partial matching of arguments
df$tw
```

```{r}
#| label: tibbles prevent this from happening since it can lead to accidental errors
tbbl$tw
```

```{r}
#| label: R data frames drop dimensions when subsetted
# If a standard data frame subsets the columns down to a single column, the object is converted to a vector
df[, "two"]
```

```{r}
#| label: tibbles do not drop dimensions
tbbl[, "two"]
```

-   To demonstrate some syntax, let’s use tidyverse functions to read in data that could be used in modeling.

-   The data set comes from the city of Chicago’s data portal and contains daily ridership data for the city’s elevated train stations. 

```{r}
url <- "https://data.cityofchicago.org/api/views/5neh-572f/rows.csv?accessType=DOWNLOAD&bom=true&format=true"

all_stations <- 
  # Step 1: Read in the data.
  read_csv(url) |> 
  # Step 2: filter columns and rename station name
  dplyr::select(station = stationname, date, rides) |> 
  # Step 3: Convert the character date field to a date encoding.
  # Also, put the data in units of 1K rides
  mutate(date = mdy(date), rides = rides / 1000) |> 
  # Step 4: Summarize the multiple records using the maximum.
  group_by(date, station) |> 
  summarize(rides = max(rides), .groups = "drop")
```
